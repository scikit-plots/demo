# This is a basic workflow for building and deploying to help you get started with Actions

name: CI Build and Deploy

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "gh_jupyterlite_demo" branch
  push:
    branches: [ "gh_jupyterlite_demo" ]
  pull_request:
    branches: [ "gh_jupyterlite_demo" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    # Specify runner +  build & upload the static files as an artifact
    runs-on: ubuntu-latest
    permissions:
      contents: write

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Runs a single command using the runners shell
      # - name: Run a one-line script
      #   run: echo Hello, world!
      # Runs a set of commands using the runners shell
      # - name: Run a multi-line script
      #   run: |
      #     echo Add other actions to build,
      #     echo test, and deploy your project.

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v4

      # Runs command: Setup Python
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # Runs command: Setup micromamba for xeus
      - name: Install mamba
        uses: mamba-org/setup-micromamba@v1
        with:
          micromamba-version: '1.5.8-0'
          environment-file: build-environment.yml
          cache-environment: true

      # Runs command: Install dependencies listed in requirements.txt
      - name: Install the dependencies
        run: |
          python -m pip install -U pip
          python -m pip install -r requirements.txt

      # Runs command: Build the JupyterLite site (replace with your actual build command)
      - name: Build the JupyterLite site
        id: build
        # -l flag ensures that the shell acts as a login shell,
        shell: bash -l {0}  # Ensure it's run in a login shell
        run: |
          echo "Building JupyterLite site"
          cp README.md content
          jupyter lite build --contents content --output-dir dist

      # List build directory contents (for debugging)
      - name: List build directory contents
        run: ls ./dist  # Debug step to verify output directory
      - name: List installed kernels in JupyterLite
        run: |
          # Ensure pyodide kernel is available
          ls -la ./dist/kernels || echo "No kernels directory found"

      # Runs command: Upload the build output artifact for deployment
      - name: Upload extension packages
        uses: actions/upload-pages-artifact@v3
        # uses: actions/upload-artifact@v2
        with:
          path: ./dist

      
  # Deployment job
  deploy:
    # Add a dependency to the build job
    needs: build
    # Specify runner + deployment step
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write      # to deploy to Pages
      id-token: write   # to verify the deployment originates from an appropriate source

    # Deploy to the github-pages environment
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }} 

    # Only run this job if the push is on the gh_jupyterlite_demo branch
    # if: github.ref == 'refs/heads/gh_jupyterlite_demo'

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checkout the repository to get the latest code
      - name: Checkout repository
        uses: actions/checkout@v3

      # Download the previously uploaded artifact (This is crucial for deploy-pages to work)
      - name: Download GitHub Pages artifact
        uses: actions/download-artifact@v3
        with:
          # name: jupyterlite-pyodide-kernel-dist-${{ github.run_number }}
          path: ./dist

      # Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        # with:
        #   artifact_name: jupyterlite-pyodide-kernel-dist-${{ github.run_number }}